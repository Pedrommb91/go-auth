// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RUb2/TTgz+KpV/+0mMpk26blWJhGBDCCbxAk3whjagI/Ham5K7m+0ORpXvju6Sdusa",
	"/klIvGnvfH782H4cryG3lbMGjTCka+B8iZUKxxeESvA9I10gO2sYvdWRdUiiMfjowv9eWqqUQArayOQY",
	"IpBbh80VF0hQ1xEQXq80YQHpzKOyrZP9fIW5QB3BSyJL+xy4MbcAFtJm4QEN+565Qma1wM43p2TZ+cCi",
	"ZMUPqxkfdVQTgegKWVTldvwLJTjwT3eYTfz9BtwPsmWP2mLvamgz7mrXBS40C1Kj0PUKWc5scdvRwErp",
	"0h8q9fUNmoXvwNHJOIJKm819HIgEyUAKH2engw9q8C0ZPBl+6v8/yPrP71kGWX82zFpD1j/Yr9bHYv5i",
	"qXjAOprskE53SB89ezp8vAl7GG7zeXHYWubzIltPo9Gk7iRcMZJRFT4gnOxV+XNhtmGitmv3StnXwKO1",
	"ubRhoLSU/u2V7b3DypVKsHf69hwiuEFibX2Jo2EyTHy21qFRTkMK42BqVA5ixdTKGnS0LP7fq6lEW3Ne",
	"QLoj/GtlihL9xNDuCOTWCJqAVs6VOg/4+Ip9Jpvv3J8OCC8hhf/iu0UQt1sg/tGI1XXTuGYthLyPktEf",
	"0WrBin/F37GC6k4VCuSctJOmz5u0e15OjzhOkr+fXLOufiefM1X02vZ5/5N/m03w7NG2oR6jFuzHv5m9",
	"ZtQgC1hG8gMM6WwNKyohhaWI4zSOS5urcmlZ0mkyTWLldHwzgjqrvwcAAP//PcDjEFQGAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
