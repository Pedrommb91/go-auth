// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RUUW/TQAz+K5UZEqNpk63bVCIh2BCCSTygCV5oAzoSr70pubvZ7mBU+e/oLmnXroHB",
	"A+KlvfP582f7c7yE3FbOGjTCkC6B8zlWKhxfESrBj4x0geysYfRWR9Yhicbgowv/e2mpUgIpaCMnRxCB",
	"3DpsrjhDgrqOgPB6oQkLSCcela2d7NcrzAXqCF4TWdrlwJW5BbCQNjMPaNh3zBUyqxl2vjkl884HFiUL",
	"vl/N6LCjmghEV8iiKrflXyjBgX+6w6zi7zZgM8iaPWqLvauhzbirXRc40yxIjULXC2Q5s8VtRwMrpUt/",
	"qNT3d2hmvgOHx6MIKm1W91EgEiQDKXyenA4+qcGPZPBs+KX/eJD1X25YBll/MsxaQ9bf263Wx2L+Zqm4",
	"x3qyTTreIn3y4vnw6SrsfrhNp8V+a5lOi2w5jupOugUjGVXh7+lGD8myDhO1PdsoZFcBj9bm0oZx0lL6",
	"tze29wErVyrB3un7c4jgBom19QUeDJNh4rO1Do1yGlIYBVOjcZAqplbUoKJl8f9eSyXamvMC0i3Z3ypT",
	"lOjnhbYHILdG0AS0cq7UecDHV+wzWX3l/rRHeAkpPIrv1kDc7oD4VwNW103jmqUQ8j5Mkr+i1YIVP8Tf",
	"sYDqThUK5Jy0k6bPq7R7Xk6POPoXyTXL6k/yOVNFr22f9z/+v9kEzx6tG+oxasZ+/JvZa0YNsoBlJD/A",
	"kE6WsKASUpiLOE7juLS5KueWJR0n4yRWTsc3B1Bn9c8AAAD//+SrRrhSBgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
